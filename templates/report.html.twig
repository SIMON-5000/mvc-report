{% extends "base.html.twig" %}

{% block title %}
{% endblock %}

{% block main %}
    <h1>Rapporter från moment</h1>
    <nav class="report-menu">
        <a href="#kmom01">kmom01</a>
        <a href="#kmom02">kmom02</a>
        <a href="#kmom03">kmom03</a>
        <a href="#kmom04">kmom04</a>
    </nav>
            <article class="kmom kmom05" id="kmom05">
            <h2>KMOM-05</h2>
            <h3>En doktrin i symfonin?</h3>
            <p>
                Övningen var bra och tydlig, det är mycket nytt, men man får ett bra sätt att lösa C.R.U.D. med.
                Sedan när jag använder det själv och läser det länkade dokumentet
                https://symfony.com/doc/current/doctrine.html ser jag att saker går att göra på flera sätt.
                Aj då, då måste man som nyfiken person kolla upp vad som skiljer sig mellan att använda 
                <code>EntityManagerInterface $entityManager</code> 
                respektive
                <code>
                ( ManagerRegistry $doctrine )
                $entityManager = $doctrine->getManager();
                </code> 
                Hur vet EntityManagerInterface vilken entity den skall jobba med? och så vidare...
                Hjälp mig i mitt självskadebeteende.
            </p>

            <h3>Ett litet bibliotek</h3>
            <p>
                Jag har inte lagt till några extra funktioner, så det var inte så mycket att tänka på.
                Jag försökte göra det logiskt och enkelt.
                Om man klickar in på en bok kan man uppdatera eller radera den där.
                Det bör vara ett lättbegripligt flöde.
                Jag gjorde en ny library-template i twig som "extendar" base-template med de få länkar som behövs.
                Specialisering genom arv.
            </p>
            <h3>ORMtjusare?</h3>
            <p>
                Dom har gjort ett väldigt användarvänligt gränssnitt med terminalklienten som man fyller i.
                Men det gör att man hamnar långt bort från databasen när man behöver anpassa eller ändra den.
                Det blir (kanske bara i början) lätt att gå vilse bland mellanhänderna/lagren som skiljer mig från databasen.
                Men det är skönt om man har en fungerande struktur som inte behöver ändras och man kan använda getters och setters, så man slipper byta programmeringsspråk.
            </p>
            <p>
                Ett smart system, en klass är en tabell, en instans är en rad.
                Jag tänkte på likheten i tänk när vi läste OOPython och Databaskursen parallellt,
                både klasser och tabeller representerar ofta objekt eller företeelser i den riktiga världen,
                och de bör separeras efter ansvarsområde och ha en specifik uppgift.
                Så jag tycker det är ett logiskt och bra arbetssätt.
            </p>
            <h3>Veckans lärdomar</h3>
            <p>
                Jag gjorde en array_map med PHPs arrow function (slängde den sen).<br>
                Att lära sig syntaxen för att blidka PHP-Stan borde vara en egen kurs.<br>
                Att när man inte använder serializer så är controllerns json-metod en förtäckt
                json_encode vilket innebär att man kan använda 'json_encode_options' och lägga
                in den fördefinierade konstanten JSON_PRETTY_PRINT.
            </p>
        </article>

        <article class="kmom kmom04" id="kmom04">
            <h2>KMOM-04</h2>
            <h3>Kod som testar kod - med PHPUnit</h3>
            <p>
                Min första bekantskap med testning var under OOPython-kursen, det verkade meningsfullt, men lite tråkigt, 
                jag kämpade mig igenom dom. När jag sedan skrev slutuppgiften med rekursiva traversioner minns jag tanken: 
                _"Om det bara hade funnits ett sätt att hålla koll på att alla delar som påverkas av detta fortfarande funkar!"_ 
                sen kom jag på testerna, jag hade glömt att dom faktiskt kan fylla en praktisk funktion!

                PHPUnit är ganska likt testerna vi använde i python, och när jag läser i dokumentationen verkar det bra. 
                Dock är dokumentationen lite väl snål, eller riktad till mer erfarna programmerare. 
            </p>
            <h3>90% kodtäckning?</h3>
            <p>
                Jag nådde 100% kodteckning, vilket inte säger något om testernas kvalitet.
                Jag började testningen "utifrån", med de klasser som använder andra. 
                Där kommer mycket täckning på de underliggande klasserna automatiskt.
                Så ska man nog inte göra, det blev ibland att jag sorterade gröna rader som klara, fast de bara testats implicit, 
                och kanske inte deras logik testats korrekt.
            </p>
            <h3>Testbarhet och förbättringar?</h3>
            <p>
                All min kod går att testa men vissa delar borde varit enklare.
                Mina största problem var att testa kommunikationen med session, jag trixade med mockningen ett bra tag.
                Antagligen överkomplicerar jag det. Men när jag väl fick till en setup så flöt det på.
                Jag borde ha brutit ut själva kommunikationen till en separat klass. Generellt verkar en god
                separation of concerns vara väldigt skönt när man testar.
            </p>
            <h3>Skriva om kod för test</h3>
            <p>
                Jag skrev om smådelar, men undlät mig att lägga till en del metoder som egentligen hade förenklat processen.
                Varför? Jag började fundera på om det är "rätt" att inkludera en metod i en klass för att använda enbart i testning.
                Att forma klassen så den är lätt att testa är en sak, att skriva metoder som enbart används i testning är nog en annan?
            </p>
            <h3>Är testbar kod “snygg och ren kod”</h3>
            <p>
                Det finns samband där, logisk och enkel kod. Tydligt uppdelad där var del har ett eget ansvarsområde underlättar.
                Och det är ju rent och testbart. 
            </p>
            <h3>Veckans läroupplevelse</h3>
            <p>
                Mockningen av sessionshanteringen var en resa.
                Jag försökte mocka med `willReturnMap` men fick det inte att funka,
                så jag bytte till `willReturnCallback` och då gick det bättre.
                I callbacken kan man skriva lite friare kod och forma stub:en som man vill, skönt. 
                Och det var intressant att testa anonyma funktioner och deras beteende i PHP. 
                Att man måste importera det man vill använda in i dess block-scope.
            </p>
        </article>

        <article class="kmom 03" id="kmom03">
            <h2>KMOM-03</h2>
            <h3>Att bygga ett kortspel</h3>
            <p>
                Det finns många sätt att lösa en sådan här uppgift. 
                Jag övervägde att ha separate player-klasser och göra det möjligt att lägga till flera spelare,
                men det mest logiska och som stämde in på ledorden YAGNI och KISS var att bara använda en klass som representerar själva spelet i sig.
                Det blir som ett lager mellan Card, Deck och Hand-klasserna där all logik som är specifik för spelet hamnar. Exempelvis: 
                Man bör kunna använda ess som 14 alternativt 1. Det är en regel för just spelet 21 och den beräkningen bör ske i dess spellogik-klass inte i korthanden.
                Korthanden får en mer generell funktion som bara returnerar ett sammanslaget värde (då detta kan appliceras på många spel) sen sköts hanteringen av ess i
                spel-logiken som fungerar som en medlare mellan de mer generella klasserna och spelaren. Jag har försökt tänka på Separation of concerns.
            </p>
            <h3>Klottra i block</h3>
            <p>
                Det var extremt hjälpsamt med både mitt enkla flödesschema och att skriva pseudokod. Den här veckan har jag åkt en del tåg och suttit i väntrum,
                där har jag haft med mig ett anteckningsblock och klottrat ner en del pseudokod. Det är en perfekt metod att snabbt få ner sina tankar när man hittar en möjlig lösning på ett problem.
                Jag har ritat flödesscheman i någon tidigare uppgift och bannat mig själv för att jag inte gjort det tidigare. Dett blir lite som en karta, vart man är och vart man ska härnäst.
                Och det kan ibland vara ett större problem (eller iaf ta mer tid) för mig att jag går vilse i tankarna än hur man skriver själva koden.
            </p>
            <h3>Symfonys storhet?</h3>
            <p>
                Jag känner mig inte bekväm i Symfony, det framstår som oöverblickbart, för stort. Ju mer tid som går utan att alt krashar och brinner ju mer litar jag på det.
                Det är till stor del osäkerhet som gör mig lite obekväm, men det finns gott om dokumentation att läsa, vilket jag borde göra.
                De possitiva delarna är hur väl testat och utbyggt det är. Samt de informativa felmeddelandena man får.
            </p>
            <h3>Förbättringar</h3>
            <p>
                Mitt kortspel är fult, ej interaktivt men användbart. Jag var väldigt oinspirerad, såg bara problemen och hade inga visuella ideer, så jag fokuserade på spellogiken.
                Jag borde också studera namn-konventioner. När man läser en del bra kod är namnen så extremt förklarande och bra. Några av mina kan jag tänka snarare väcker frågor, låt mig gärna veta.
                Generellt gällande koden tror jag att det är här jag är. Jag tycker det verkar helt OK förutom flödet i hur jag tar fram vinnaren, det är något som borde gå att skriva snyggare vill jag minnas.
            </p>
            <p>
                TIL för veckaorna var annars "Stan the man" PHPStan. Vilken sadist. Jag hade 60+ fel, "rättade till" något; jaha 72 fel! "Tack Stan".
                Jag betade av dom från level 1 upp till 8, gjorde en baseline, sen slog jag på level 9 och gjorde som han sa.
                För tillfället är vi på god fot, men jag misstänker att han kan ställa till problem när som helst.
            </p>
        </article>

    <article class="kmom 02" id="kmom02">
        <h2>KMOM-02</h2>
        <h3>- Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h3>
        <p>
            Arv är när en klass baseras på en annan klass och ärver egenskaper och metoder. 
            Kanske har men en klass för frukt med egenskaper som färg, storlek och metoder som ät(). 
            Detta är egenskaper som passar på såväl äpple som apelsin (både äpple och apelsin har 
            en "is-a" relation till frukt), men i apelsinfallet behöver man till exempel bygga ut 
            den med metoden skala().
        </p>
        <p>
            Komposition handlar om det förhållande två klasser har till varandra. Låt säga att klassen äpple har en annan klass; kärnhus Om man raderar äpplet så försvinner kärnhuset. Den kan bara existera som en del av detta äpple.
            Om det dock skulle gå att plocka ut sagda kärnhus och sätta i ett annat äpple, eller om det fyller en funktion på egen hand så är relationen en aggregation. I båda fallen är det fråga om en "has-a"-relation.
        </p>
        <p>
            Interface är som en förberedelse, eller ett löfte om senare implementation.
            Låt säga att frukten skall säljas, då måste varje klass ha visaPris(), men priset beräknas olika,
            per styck, per kilo eller per meter (i fallet banan). Vi kan då implementera ett interface som kräver
            att funktionen fins, men säger inget om hur den ser ut.
            Det verkar bra om man är många som jobbar på ett projekt, eller som en minneslapp till sig själv
            för att t.ex. skapa förutsägbarhet i ett API.
        </p>
        <p>
            Traits möjliggör att man kan dela mindre delar av en klass eller en separat PHP-fil.
            Detta kan komma väl till pass för en klass som hanterar mer generella uppgifter som också kan
            användas i andra klasser, men man behöver inte ärva hela klassen.
            Metoden skala() i fruktexemplet ovan kunde passa som trait. Traits kan också anpassas i klassen som
            importerar dem så även visaPris() kunde fungera.
        </p>
        <h3>
            - Berätta om din implementation från uppgiften. Hur löste du uppgiften,
            är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?
        </h3>
        <p>
            Efter att ha gjort övningen med spelet "pig" hade jag en bra grund, men det är en omfattande uppgift
            så det tog tid. Tid är en bristvara och arbetet blev upphackat i många korta sejourer.
            En konsekvens av detta är att jag sparar min kortlek som ett objekt, medan jag sparar borttagna kort
            som som strängrepresentationer i en associativ array. Min hjärna är kanske kvar i OOPython-kursen där
            vi jobbade på liknande vis. Jag tycker det är bra för att jag testar två vettiga sätt att spara dem på.
            Men om det vore ett jobb och inte en läroprocess så hade det varit märkligt. För övrigt har jag för mycket
            kod i routerna, kunde byggt fler metoder i card- och deck-klasserna samt kanske gjort en separat klass
            för att hantera kortlekens logistik.
        </p>
        <h3>    
            - Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?
        </h3>
        <p>
            Det är fortfarande tidigt, men det verkar vara ett vettigt ramverk och ett bra system med MVC.
            Jag har tänkt för lite på hur jag skall separera koden. Det har främst varit fokus på att få saker att fungera, men framöver vill jag bli bättre på att följa MVC-principerna mer konsekvent
        </p>
        <h3> - Vilken är din TIL för detta kmom?</h3>
        <p>
            Vad sägs om det här lilla vidundret?
        </p>
            <pre><code>if (/1F0[A|D]./gm.test(card.innerHTML.trim().codePointAt(0).toString(16).toUpperCase()))</code></pre>
        <p>
            Fult va!? Jag använde unicode-spelkort och konkatenerade ihop strängar i php för att rendera dem.
            För att ändra färg (röda och svarta kort)) valde jag mellan olika metoder. "JS blir ändå enklast"
            tänkte jag. Det var lite värre än jag trodde. innerHTML var av någon anledning en serie mellanslag
            och själva symbolen mitt i, så jag fick konvertera tillbaka den till liknande unicode format och
            jämföra med regex för att få ett "enkelt" sorteringssystem. Spännande att skutta ner en kort vända
            i RegEx-träsket också.
        </p>
    </article>
    <article class="kmom 01" id="kmom01">
        <h2>KMOM-01</h2>
        <p>
            Jag har jobbat med objektorienterad kod sedan JS-kursen och sedan en djupdykning i OOPythonkursen. Så de mest grundläggande principerna har bankats in. Där verkar inte vara någon större skillnad i PHP.
            Vi skapar klasser med properties och metoder och använder $this-> för att komma åt dem. Insansiering sker också här med nyckelordet new.
            Dock har jag noterat <code>public, protected, private</code> vilket verkar vara en skillnad. I python används '_' och '__' för att indikera skyddade respektive privata instansvariabler eller metoder,
            men där är det är mer av en semantisk åtgärd och inget riktigt skydd. Det verkar fungera anorlunda i PHP. Gällande arv verkar Traits också vara lite anorlunda. Det kommer säkert dyka upp mer.
        </p>
        <p>
            Symfony är överväldigande, det är hundratals filer, vissa är säkert viktigare än andra. Jag gillar att veta vad som händer, men här får jag bara acceptera att till exempel <code>vendor/doctrine/instantiator/src/Doctrine/Instantiator.php</code> är en del av mitt projekt. Fråga inte.
            Ramverk verkar fungera på liknande sätt och jag börjar förstå hur koden är uppdelad. De felmeddelanden jag fått har också varit väldigt informativa, och det har funkat bra att åtgärda problem.
            Paket finns det många, och det är ju bra, jag gillar inte Sass så mycket så jag tänkte testa det igen och det tog inte många sekunder att få igång. Bra grejjor det här med ramverk.
        </p>
        <p>
            “PHP The Right Way” var kanske lite torr som ren lektyr, men har bra exempel och länkar till mer läsning om man undrar över något.
            Just https://refactoring.guru/design-patterns/php som de tipsade om var något jag sett tidigare och letat efter, det var över mitt huvud sist jag såg det, men jag är redo nu.
        </p>
        <p>
            Det var många nya lärdomar. Framförallt att bekanta sig med Symfony var kul.
        </p>
    </article>

{% endblock %}
